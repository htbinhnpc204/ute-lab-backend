buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
    }
}

plugins {
    id "application"
    id "java"
    id "maven-publish"
    id "idea"
    id "eclipse"
    id "jacoco"
    id "org.springframework.boot"
    id "com.google.cloud.tools.jib"
    id "com.gorylenko.gradle-git-properties"
    id "org.liquibase.gradle"
    id "io.spring.nohttp"
    id "checkstyle"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

group = "com.nals.tf7"
version = "0.0.1"

description = ""

sourceCompatibility = 11
targetCompatibility = 11
assert System.properties["java.specification.version"] == "11"

if (project.hasProperty("prod") || project.hasProperty("gae")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("gae")) {
    apply plugin: 'maven'
    apply plugin: 'org.springframework.boot.experimental.thin-launcher'
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom "tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}"
        }
    }
    appengineStage.dependsOn thinResolve
}

idea {
    module {
        excludeDirs += files("node_modules")
    }
}

eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

defaultTasks "bootRun"

application {
    mainClass = "com.nals.tf7.Review360App"
}

jar {
    enabled = false
}

test {
    exclude "**/CucumberTest*"

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.required = true
    testLogging {
        events = ["PASSED", "SKIPPED", "FAILED"]
        exceptionFormat = 'full'
    }
}

check.dependsOn test
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

if (project.hasProperty("zipkin")) {
    apply from: "gradle/zipkin.gradle"
}

project.ext.diffChangelogFile = "src/main/resources/config/liquibase/changelog/" + new Date().format("yyyyMMddHHmmss") + "_changelog.xml"

liquibase {
    activities {
        main {
            driver "com.mysql.cj.jdbc.Driver"
            url "jdbc:mysql://localhost:3306/tf7"
            username "root"
            password "r00t"
            changeLogFile "src/main/resources/config/liquibase/master.xml"
            defaultSchemaName "tf7"
            logLevel "debug"
            classpath "src/main/resources/"
        }
        diffLog {
            driver "com.mysql.cj.jdbc.Driver"
            url "jdbc:mysql://localhost:3306/tf7"
            username "root"
            password "r00t"
            changeLogFile project.ext.diffChangelogFile
            referenceUrl "hibernate:spring:com.nals.tf7.domain?dialect=org.hibernate.dialect.MySQL8Dialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
            defaultSchemaName "tf7"
            logLevel "debug"
            classpath "$buildDir/classes/java/main"
        }
    }

    runList = project.ext.runList
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

checkstyle {
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    // Use config file to exclude folders
    configProperties = ["suppressionFile": project(":").file("config/checkstyle/suppressions.xml")]
    toolVersion = "${checkstyleVersion}"
}

nohttp {
    source.include "build.gradle", "README.md"
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
    all {
        resolutionStrategy {
            // Inherited version from Spring Boot can't be used because of regressions:
            // To be removed as soon as spring-boot use the same version
            force 'org.liquibase:liquibase-core:4.6.1'
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    if (!project.hasProperty("gae")) {
        implementation platform("tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}")
    }

    implementation "tech.jhipster:jhipster-framework"
    implementation "com.fasterxml.jackson.module:jackson-module-afterburner"
    implementation "com.slack.api:slack-sdk-parent:1.18.0"
    implementation "javax.annotation:javax.annotation-api"
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "org.apache.commons:commons-lang3"
    implementation "org.apache.commons:commons-collections4:${collections4Version}"
    implementation "org.hibernate:hibernate-core"
    implementation "org.hibernate:hibernate-envers"
    implementation "org.hibernate:hibernate-entitymanager"
    implementation "org.hibernate.validator:hibernate-validator"
    implementation "org.liquibase:liquibase-core"

    implementation "org.springframework.boot:spring-boot-loader-tools"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-data"
    implementation "org.springframework.security:spring-security-web"

    implementation "io.jsonwebtoken:jjwt-api"
    implementation "io.jsonwebtoken:jjwt-impl"
    implementation "io.jsonwebtoken:jjwt-jackson"
    implementation "io.springfox:springfox-oas:${springfoxOasVersion}"
    implementation "io.springfox:springfox-swagger2:${springfoxSwagger2Version}"
    implementation "io.springfox:springfox-bean-validators:${springfoxBeanValidatorsVersion}"
    implementation "mysql:mysql-connector-java"
    implementation "org.apache.httpcomponents:httpclient"
    implementation "org.zalando:problem-spring-web:${zalandoProblemSpringWebVersion}"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "org.apache.commons:commons-math:${mathVersion}"
    implementation("org.springdoc:springdoc-openapi-webmvc-core")
    implementation "software.amazon.awssdk:s3control:${awsJavaSdkVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-redis:${redisVersion}"
    implementation "redis.clients:jedis:${jedisVersion}"

    liquibaseRuntime "mysql:mysql-connector-java"
    liquibaseRuntime "org.liquibase:liquibase-core"
    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:${liquibaseHibernate5Version}"
    liquibaseRuntime sourceSets.main.compileClasspath

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen:${hibernateVersion}"
    annotationProcessor "org.glassfish.jaxb:jaxb-runtime:${jaxbRuntimeVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}") {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "com.tobedevoured.modelcitizen:core:${modelCitizenVersion}"
    testImplementation("com.github.javafaker:javafaker:${fakerVersion}") {
        exclude module: 'snakeyaml'
    }
    testImplementation "com.h2database:h2"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}"
    developmentOnly "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "7.4.2"
}

compileJava.dependsOn processResources
processResources.dependsOn cleanResources, bootBuildInfo
bootBuildInfo.mustRunAfter cleanResources
